---
import { type CollectionEntry, getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import BreadCrumbs from "../../components/BreadCrumbs.astro";
import { categoryData } from "../../constants";
import SubcategoryCard from "../../components/SubcategoryCard.astro";

// Type definitions
type Article = CollectionEntry<"blog">;

interface SubcategoryInfo {
  displayName?: string;
  icon?: string;
}

interface CategoryInfo {
  displayName: string;
  description: string;
  subcategoryOrder: string[];
  subcategoryInfo: Record<string, SubcategoryInfo>;
}

interface SortedSubcategory {
  name: string;
  articles: Article[];
  displayName: string;
  icon: string;
}

export async function getStaticPaths() {
  const allArticles = await getCollection("blog");
  const categories = [
    ...new Set(allArticles.map((article) => article.data.category)),
  ];

  return categories.map((category) => ({
    params: { category },
    props: {
      articles: allArticles.filter(
        (article) => article.data.category === category,
      ),
    },
  }));
}

const { category } = Astro.params;
const articles: Article[] = Astro.props.articles;

function processSubcategories(
  articles: Article[],
  category: string,
): [SortedSubcategory[], CategoryInfo] {
  // Group articles by subcategories of the current category
  const subcategories = articles.reduce(
    (acc, article) => {
      const sub = article.data.subcategory;
      if (!acc[sub]) acc[sub] = [];
      acc[sub].push(article);
      return acc;
    },
    {} as Record<string, Article[]>,
  );

  // Get category info
  const categoryInfo: CategoryInfo = categoryData[
    category as keyof typeof categoryData
  ] || {
    displayName: category,
    description: `Articles about ${category}`,
    // Default subcategory order
    subcategoryOrder: Object.keys(subcategories),
    subcategoryInfo: {},
  };

  const orderedKeys = categoryInfo.subcategoryOrder || [];
  const allKeys = Object.keys(subcategories);

  const sortedKeys = orderedKeys.filter((key) => allKeys.includes(key));
  const remainingKeys = allKeys.filter((key) => !orderedKeys.includes(key));

  const finalOrder = [...sortedKeys, ...remainingKeys];

  const sortedSubcategories = finalOrder.map((key) => ({
    name: key,
    articles: subcategories[key],
    displayName: categoryInfo.subcategoryInfo[key]?.displayName || key,
    icon: categoryInfo.subcategoryInfo[key]?.icon || "default",
  }));

  return [sortedSubcategories, categoryInfo];
}

const [sortedSubcategories, categoryInfo] = processSubcategories(
  articles,
  category!,
);

const title = categoryInfo.displayName;
const description = categoryInfo.description;

const breadcrumbData = [
  { label: "Home", href: "/" },
  { label: title, href: `/${category}/` },
];

const titleStyles = [
  "mb-4 bg-gradient-to-r from-slate-100 via-slate-300 to-blue-400 bg-clip-text text-5xl font-bold text-transparent",
  "transition-all duration-700 ease-out",
  "mt-8",
];
---

<BaseLayout title={title} description={description}>
  <div class="min-h-[75vh]">
    <div class="mx-auto px-4 py-8">
      <header class="mb-12 text-center">
        <BreadCrumbs crumbs={breadcrumbData} />

        <h1 class:list={titleStyles} transition:name={title}>{title}</h1>
      </header>
    </div>

    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
      {
        sortedSubcategories.map((subcategory) => {
          return (
            <SubcategoryCard
              title={subcategory.displayName}
              articleCount={subcategory.articles.length}
              href={`/${category}/${subcategory.name}`}
            />
          );
        })
      }
    </div>
  </div>
</BaseLayout>
