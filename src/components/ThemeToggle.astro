---
// src/components/ThemeToggle.astro
const sunIcon = `<svg ...> Sun Icon SVG </svg>`; // Replace with actual SVG
const moonIcon = `<svg ...> Moon Icon SVG </svg>`; // Replace with actual SVG
---

<button
  id="theme-toggle-button"
  type="button"
  aria-label="Toggle dark mode"
  class="rounded-md p-2 text-gray-500 hover:bg-gray-100 hover:text-gray-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-gray-100 focus:outline-none dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-200 dark:focus:ring-offset-gray-800"
>
  <span id="theme-toggle-light-icon" class="hidden">
    <!-- Sun Icon -->
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      stroke-width="2"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
      ></path>
    </svg>
  </span>
  <span id="theme-toggle-dark-icon" class="hidden">
    <!-- Moon Icon -->
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      stroke-width="2"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
      ></path>
    </svg>
  </span>
</button>

<script>
  // This script runs on the client, after the initial inline script
  const toggleButton = document.getElementById("theme-toggle-button");
  const lightIcon = document.getElementById("theme-toggle-light-icon");
  const darkIcon = document.getElementById("theme-toggle-dark-icon");

  // Function to update button state based on current theme
  function updateButtonState() {
    const isDarkMode = document.documentElement.classList.contains("dark");
    if (isDarkMode) {
      darkIcon?.classList.remove("hidden");
      lightIcon?.classList.add("hidden");
      toggleButton?.setAttribute("aria-pressed", "true"); // For accessibility
    } else {
      lightIcon?.classList.remove("hidden");
      darkIcon?.classList.add("hidden");
      toggleButton?.setAttribute("aria-pressed", "false"); // For accessibility
    }
  }

  // Set initial button state on page load
  updateButtonState();

  // Add click listener to toggle theme
  toggleButton?.addEventListener("click", () => {
    const isDark = document.documentElement.classList.toggle("dark");
    const newTheme = isDark ? "dark" : "light";
    localStorage.setItem("theme", newTheme); // Save preference
    updateButtonState(); // Update button icon
  });

  // Optional: Listen for changes in OS preference (e.g., if user changes OS theme while site is open)
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      // Only change if there's no explicit user preference saved
      if (!localStorage.getItem("theme")) {
        if (e.matches) {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.remove("dark");
        }
        updateButtonState();
      }
    });
</script>
