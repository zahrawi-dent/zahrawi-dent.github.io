---
// SearchComponent.astro
---

<div class="w-full max-w-2xl mx-auto">
  <div class="relative">
    <input 
      type="text" 
      id="search-input"
      placeholder="Search..."
      class="w-full px-4 py-2 pr-10 text-sm border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
    />
    <button 
      id="search-button"
      class="absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 hover:text-blue-500"
      aria-label="Search"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </button>
  </div>
  
  <div id="search-results" class="mt-4 bg-white rounded-lg shadow-md hidden">
    <ul class="divide-y divide-gray-200">
      <!-- Search results will be displayed here -->
    </ul>
    <div id="no-results" class="p-4 text-center text-gray-500 hidden">
      No results found.
    </div>
    <div id="loading" class="p-4 text-center text-gray-500 hidden">
      Searching...
    </div>
  </div>
</div>

<script>
  // Get references to DOM elements
  const searchInput = document.getElementById('search-input');
  const searchButton = document.getElementById('search-button');
  const searchResults = document.getElementById('search-results');
  const noResults = document.getElementById('no-results');
  const loading = document.getElementById('loading');
  const resultsList = searchResults.querySelector('ul');
  
  // Sample data - replace with your actual data source
  const items = [
    { title: 'Getting Started with Astro', url: '/docs/getting-started' },
    { title: 'Components in Astro', url: '/docs/components' },
    { title: 'Routing in Astro', url: '/docs/routing' },
    { title: 'Using Tailwind with Astro', url: '/docs/tailwind' },
    { title: 'Deployment Options', url: '/docs/deployment' },
  ];
  
  // Search function
  function performSearch(query) {
    // Show loading state
    resultsList.innerHTML = '';
    searchResults.classList.remove('hidden');
    loading.classList.remove('hidden');
    noResults.classList.add('hidden');
    
    // Simulate network delay (remove in production)
    setTimeout(() => {
      // Convert query to lowercase for case-insensitive matching
      const normalizedQuery = query.toLowerCase().trim();
      
      if (normalizedQuery === '') {
        searchResults.classList.add('hidden');
        return;
      }
      
      // Filter items based on the query
      const results = items.filter(item => 
        item.title.toLowerCase().includes(normalizedQuery)
      );
      
      // Hide loading indicator
      loading.classList.add('hidden');
      
      // Display results or show "no results" message
      if (results.length > 0) {
        resultsList.innerHTML = results.map(item => `
          <li class="hover:bg-gray-50">
            <a href="${item.url}" class="block px-4 py-3">
              <h3 class="text-sm font-medium text-gray-900">${highlightMatch(item.title, normalizedQuery)}</h3>
            </a>
          </li>
        `).join('');
        noResults.classList.add('hidden');
      } else {
        resultsList.innerHTML = '';
        noResults.classList.remove('hidden');
      }
    }, 300);
  }
  
  // Highlight the matching text in search results
  function highlightMatch(text, query) {
    const regex = new RegExp(`(${query})`, 'gi');
    return text.replace(regex, '<span class="bg-yellow-100">$1</span>');
  }
  
  // Event listeners
  searchButton.addEventListener('click', () => {
    performSearch(searchInput.value);
  });
  
  searchInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      performSearch(searchInput.value);
    }
  });
  
  // Close search results when clicking outside
  document.addEventListener('click', (e) => {
    if (!searchInput.contains(e.target) && !searchButton.contains(e.target) && !searchResults.contains(e.target)) {
      searchResults.classList.add('hidden');
    }
  });
  
  // Show results when input receives focus if there's text
  searchInput.addEventListener('focus', () => {
    if (searchInput.value.trim() !== '') {
      performSearch(searchInput.value);
    }
  });
</script>
