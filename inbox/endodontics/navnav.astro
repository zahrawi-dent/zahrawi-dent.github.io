
---
// NavBar.astro
import { Icon } from 'astro-icon/components';

interface NavItem {
  title: string;
  url: string;
}

const navItems: NavItem[] = [
  { title: 'Home', url: '/' },
  { title: 'About', url: '/about' },
  { title: 'Blog', url: '/blog' },
  { title: 'Research', url: '/research' },
  { title: 'Resources', url: '/resources' },
  { title: 'Contact', url: '/contact' },
];

const currentPath = Astro.url.pathname;
---

<nav class="sticky top-0 z-50 w-full bg-white shadow-md">
  <div class="container mx-auto px-4">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center text-xl font-bold text-teal-600">
          <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.26 10.147a60.436 60.436 0 00-.491 6.347A48.627 48.627 0 0112 20.904a48.627 48.627 0 018.232-4.41 60.46 60.46 0 00-.491-6.347m-15.482 0a50.57 50.57 0 00-2.658-.813A59.905 59.905 0 0112 3.493a59.902 59.902 0 0110.399 5.84c-.896.248-1.783.52-2.658.814m-15.482 0A50.697 50.697 0 0112 13.489a50.702 50.702 0 017.74-3.342M6.75 15a.75.75 0 100-1.5.75.75 0 000 1.5zm0 0v-3.675A55.378 55.378 0 0112 8.443m-7.007 11.55A5.981 5.981 0 006.75 15.75v-1.5" />
          </svg>
          Zahrawi
        </a>
      </div>

      <!-- Mobile menu button -->
      <div class="flex md:hidden">
        <button
          type="button"
          id="mobile-menu-toggle"
          class="inline-flex items-center justify-center rounded-md p-2 text-gray-700 hover:bg-gray-100 hover:text-teal-600 focus:outline-none"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <div id="hamburger" class="relative h-6 w-6">
            <span id="hamburger-top" class="absolute top-2 left-0 block h-0.5 w-6 rounded-sm bg-gray-700 transition-all duration-300"></span>
            <span id="hamburger-middle" class="absolute top-3 left-0 block h-0.5 w-6 rounded-sm bg-gray-700 transition-all duration-300"></span>
            <span id="hamburger-bottom" class="absolute top-4 left-0 block h-0.5 w-6 rounded-sm bg-gray-700 transition-all duration-300"></span>
          </div>
        </button>
      </div>

      <!-- Desktop menu - Centralized menu and right aligned actions -->
      <div class="hidden md:flex md:flex-1 md:items-center md:justify-between">
        <div class="mx-auto hidden md:flex md:space-x-4 lg:space-x-6">
          {navItems.map((item) => (
            <a 
              href={item.url} 
              class={`inline-flex items-center px-1 py-1 text-sm font-medium transition-colors duration-200
                ${currentPath === item.url 
                  ? 'text-teal-600 border-b-2 border-teal-600' 
                  : 'text-gray-700 hover:text-teal-600 hover:border-b-2 hover:border-teal-600'
                }`}
            >
              {item.title}
            </a>
          ))}
        </div>
        
        <div class="flex items-center space-x-2">
          <!-- Subscribe button -->
          <a 
            href="/subscribe" 
            class="hidden sm:inline-flex items-center justify-center rounded-md bg-teal-500 px-3 py-2 text-sm font-medium text-white hover:bg-teal-600 focus:outline-none"
          >
            Subscribe
          </a>
          
          <!-- Search button -->
          <div id="search-container" class="relative ml-1">
            <button 
              id="search-toggle"
              class="flex items-center justify-center rounded-full p-1.5 text-teal-600 hover:bg-gray-100 focus:outline-none"
              aria-label="Search"
            >
              <Icon name="mdi:magnify" class="h-5 w-5" />
            </button>
            <div id="search-form" class="absolute right-0 top-full mt-2 w-0 overflow-hidden rounded-md border border-gray-200 bg-white shadow-lg transition-all duration-300 ease-in-out opacity-0 invisible">
              <form action="/search" method="get" class="flex w-full overflow-hidden">
                <input 
                  type="text" 
                  name="q" 
                  placeholder="Search..." 
                  class="w-full p-2 outline-none"
                />
                <button 
                  type="submit" 
                  class="bg-teal-500 px-3 text-white"
                  aria-label="Submit search"
                >
                  <Icon name="mdi:arrow-right" class="h-5 w-5" />
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div id="mobile-menu" class="hidden md:hidden">
    <div class="space-y-1 px-4 pb-3 pt-2">
      {navItems.map((item) => (
        <a
          href={item.url}
          class={`block rounded-md px-3 py-2 text-base font-medium ${
            currentPath === item.url
              ? 'bg-teal-50 text-teal-600'
              : 'text-gray-700 hover:bg-gray-50 hover:text-teal-600'
          }`}
        >
          {item.title}
        </a>
      ))}
      <a 
        href="/subscribe" 
        class="mt-2 block rounded-md bg-teal-500 px-3 py-2 text-center text-base font-medium text-white hover:bg-teal-600"
      >
        Subscribe
      </a>
    </div>
    <div class="px-4 py-3">
      <form action="/search" method="get" class="flex overflow-hidden rounded-md border border-gray-200">
        <input 
          type="text" 
          name="q" 
          placeholder="Search..." 
          class="w-full p-2 outline-none"
        />
        <button 
          type="submit" 
          class="bg-teal-500 px-3 text-white"
          aria-label="Submit search"
        >
          <Icon name="mdi:arrow-right" class="h-5 w-5" />
        </button>
      </form>
    </div>
  </div>
</nav>


<script>
  // Ensuring the script runs both on initial page load and on subsequent navigation
  function setupNavInteractivity() {
    // Mobile menu toggle
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const hamburgerTop = document.getElementById('hamburger-top');
    const hamburgerMiddle = document.getElementById('hamburger-middle');
    const hamburgerBottom = document.getElementById('hamburger-bottom');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuToggle && mobileMenu) {
      mobileMenuToggle.addEventListener('click', () => {
        const expanded = mobileMenuToggle.getAttribute('aria-expanded') === 'true';
        mobileMenuToggle.setAttribute('aria-expanded', expanded ? 'false' : 'true');
        
        // Toggle mobile menu visibility
        mobileMenu.classList.toggle('hidden');
        
        // Transform hamburger to X
        if (!expanded) {
          if (hamburgerTop) {
            hamburgerTop.style.transform = 'translateY(4px) rotate(45deg)';
          }
          if (hamburgerMiddle) {
            hamburgerMiddle.style.opacity = '0';
          }
          if (hamburgerBottom) {
            hamburgerBottom.style.transform = 'translateY(-4px) rotate(-45deg)';
          }
        } else {
          if (hamburgerTop) {
            hamburgerTop.style.transform = '';
          }
          if (hamburgerMiddle) {
            hamburgerMiddle.style.opacity = '1';
          }
          if (hamburgerBottom) {
            hamburgerBottom.style.transform = '';
          }
        }
      });
    }

    // Desktop search animation
    const searchToggle = document.getElementById('search-toggle');
    const searchForm = document.getElementById('search-form');
    const searchContainer = document.getElementById('search-container');
    
    if (searchToggle && searchForm) {
      searchToggle.addEventListener('click', (e) => {
        e.stopPropagation();
        
        if (searchForm.classList.contains('invisible')) {
          // Expand search form
          searchForm.classList.remove('invisible', 'opacity-0', 'w-0');
          searchForm.classList.add('visible', 'opacity-100');
          searchForm.style.width = '16rem';
          
          // Adjust width on smaller screens
          if (window.innerWidth < 640) {
            searchForm.style.width = '12rem';
          }
          
          // Focus on input after animation completes
          setTimeout(() => {
            const input = searchForm.querySelector('input');
            if (input) input.focus();
          }, 300);
        } else {
          // Collapse search form
          searchForm.classList.remove('visible', 'opacity-100');
          searchForm.classList.add('invisible', 'opacity-0');
          searchForm.style.width = '0';
        }
      });
      
      // Close search when clicking outside
      document.addEventListener('click', (event) => {
        if (searchForm.classList.contains('visible') && !searchContainer.contains(event.target)) {
          searchForm.classList.remove('visible', 'opacity-100');
          searchForm.classList.add('invisible', 'opacity-0');
          searchForm.style.width = '0';
        }
      });
      
      // Adjust search width on window resize
      window.addEventListener('resize', () => {
        if (searchForm.classList.contains('visible')) {
          if (window.innerWidth < 640) {
            searchForm.style.width = '12rem';
          } else {
            searchForm.style.width = '16rem';
          }
        }
      });
    }
  }

  // Run on initial page load
  document.addEventListener('DOMContentLoaded', setupNavInteractivity);
  
  // Run on Astro page transitions
  document.addEventListener('astro:page-load', setupNavInteractivity);
</script>
