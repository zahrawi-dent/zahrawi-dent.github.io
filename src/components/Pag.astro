---
// src/components/Pagination.astro

const {
  currentPage = 1,
  totalItems = 0,
  itemsPerPage = 10,
  visiblePages = 2,
} = Astro.props;

const totalPages = Math.ceil(totalItems / itemsPerPage);
---

<div
  id="pagination"
  data-current-page={currentPage}
  data-total-pages={totalPages}
  data-visible-pages={visiblePages}
  class="flex gap-1 items-center justify-center my-8"
>
  <button
    class="px-3 py-1 rounded-md disabled:opacity-50 disabled:cursor-not-allowed bg-gray-100 hover:bg-gray-200 text-gray-700 transition-colors"
    disabled={currentPage === 1}
    data-page="prev"
    aria-label="Previous page"
  >
    &laquo;
  </button>

  {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
    <button
      class={`px-3 py-1 rounded-md ${
        page === currentPage
          ? 'bg-blue-500 text-white'
          : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
      } transition-colors`}
      data-page={page}
    >
      {page}
    </button>
  ))}

  <button
    class="px-3 py-1 rounded-md disabled:opacity-50 disabled:cursor-not-allowed bg-gray-100 hover:bg-gray-200 text-gray-700 transition-colors"
    disabled={currentPage === totalPages}
    data-page="next"
    aria-label="Next page"
  >
    &raquo;
  </button>
</div>

<script is:inline>
function generatePageNumbers(currentPage, totalPages, visiblePages) {
  if (totalPages <= 1) return [];
  const pages = [];
  const startPage = Math.max(1, currentPage - visiblePages);
  const endPage = Math.min(totalPages, currentPage + visiblePages);

  pages.push(1);
  if (startPage > 2) pages.push('...');
  for (let i = startPage; i <= endPage; i++) if (i !== 1 && i !== totalPages) pages.push(i);
  if (endPage < totalPages - 1) pages.push('...');
  if (totalPages > 1) pages.push(totalPages);
  return pages;
}

document.addEventListener('DOMContentLoaded', () => {
  const pagination = document.getElementById('pagination');
  let currentPage = parseInt(pagination.dataset.currentPage);
  const totalPages = parseInt(pagination.dataset.totalPages);
  const visiblePages = parseInt(pagination.dataset.visiblePages);

  function updatePagination(newPage) {
    currentPage = newPage;
    const pages = generatePageNumbers(currentPage, totalPages, visiblePages);
    
    // Clear existing buttons
    const prevBtn = pagination.querySelector('[data-page="prev"]');
    const nextBtn = pagination.querySelector('[data-page="next"]');
    const existingPages = [...pagination.children].filter(
      el => !['prev', 'next'].includes(el.dataset.page)
    );
    existingPages.forEach(el => el.remove());

    // Create new buttons
    const fragment = document.createDocumentFragment();
    pages.forEach(page => {
      if (page === '...') {
        const span = document.createElement('span');
        span.className = 'px-3 py-1';
        span.textContent = '...';
        fragment.appendChild(span);
      } else {
        const button = document.createElement('button');
        button.className = `px-3 py-1 rounded-md ${
          page === currentPage 
            ? 'bg-blue-500 text-white' 
            : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
        } transition-colors`;
        button.textContent = page;
        button.dataset.page = page;
        fragment.appendChild(button);
      }
    });

    prevBtn.after(fragment);
    
    // Update button states
    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === totalPages;
    
    // Dispatch event
    document.dispatchEvent(new CustomEvent('pageChange', { detail: currentPage }));
  }

  pagination.addEventListener('click', (e) => {
    const button = e.target.closest('button');
    if (!button) return;

    const page = button.dataset.page;
    let newPage = currentPage;

    if (page === 'prev') newPage--;
    else if (page === 'next') newPage++;
    else newPage = parseInt(page);

    if (newPage >= 1 && newPage <= totalPages && newPage !== currentPage) {
      updatePagination(newPage);
    }
  });
});
</script>
