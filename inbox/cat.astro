---
// src/pages/categories/[category].astro
import MainLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import SubcategoryCard from "../components/SubcategoryCard.jsx";

// Generate paths for all categories
export async function getStaticPaths() {
  const allArticles = await getCollection("blog");
  
  // Get unique categories
  const categories = [...new Set(allArticles.map(article => article.data.category))];
  
  return categories.map(category => ({
    params: { category },
    props: {
      articles: allArticles.filter(article => article.data.category === category)
    }
  }));
}

const { category } = Astro.params;
// const { articles } = Astro.props;
const articles = await getCollection("blog");

// Group articles by subcategory
const subcategories = articles.reduce((acc, article) => {
  const subcategory: string = article.data.subcategory;
  if (!acc[subcategory]) {
    acc[subcategory] = [];
  }
  acc[subcategory].push(article);
  return acc;
}, {});


// Get category information or provide defaults
const categoryInfo = categoryData[category as keyof typeof categoryData] || { 
  displayName: category,
  description: `Articles about ${category}`,
  subcategoryOrder: Object.keys(subcategories),
  subcategoryInfo: {}
};

// Sort subcategories based on the defined order
const sortedSubcategories = categoryInfo.subcategoryOrder
  .filter(key => subcategories[key]) // Only include subcategories that have articles
  .map(key => ({
    name: key,
    articles: subcategories[key] || [],
    displayName: (categoryInfo.subcategoryInfo[key as keyof typeof categoryInfo.subcategoryInfo]?.displayName) || key,
    icon: (categoryInfo.subcategoryInfo[key as keyof typeof categoryInfo.subcategoryInfo]?.icon) || "default"
  }));

// Add any subcategories that weren't in the predefined order
Object.keys(subcategories)
  .filter(key => !categoryInfo.subcategoryOrder.includes(key))
  .forEach(key => {
    sortedSubcategories.push({
      name: key,
      articles: subcategories[key],
      displayName: key,
      icon: "default"
    });
  });
---

<MainLayout title={categoryInfo.displayName} description={categoryInfo.description}>
  <div class="mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8">
    <header class="mb-12">
      <h1 class="mb-4 text-4xl font-bold text-gray-900">{categoryInfo.displayName}</h1>
      <p class="max-w-3xl text-xl text-gray-600">
        {categoryInfo.description}
      </p>
    </header>

    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
      {sortedSubcategories.map(subcategory => (
        <SubcategoryCard 
          name={subcategory.name}
          displayName={subcategory.displayName}
          categoryName={category}
          articleCount={subcategory.articles.length}
          icon={subcategory.icon}
          client:load
        />
      ))}
    </div>
    
    {sortedSubcategories.length === 0 && (
      <div class="rounded-lg bg-gray-50 p-8 text-center">
        <h3 class="mb-2 text-lg font-medium text-gray-900">
          No subcategories yet
        </h3>
        <p class="text-gray-600">
          We're currently working on content for this category. Check back soon
          for updates!
        </p>
      </div>
    )}
  </div>
</MainLayout>
